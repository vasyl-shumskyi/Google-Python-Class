#!/usr/bin/python
# Copyright 2010 Google Inc.
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/LICENSE-2.0

# Google's Python Class
# http://code.google.com/edu/languages/google-python-class/

import sys
import re
import os
import shutil
import commands

"""Copy Special exercise
"""

# +++your code here+++
# Write functions and modify main() to call them

#dir = sys.argv[1]
#files = os.listdir(dir)
#for file in files: print os.path.abspath(file)

list_f = []

def list_files(dir): 
  dir = sys.argv[-1]
  files = os.listdir(dir)
  for filename in files: 
    file__name = re.findall(r'__\w',filename)
    if file__name: list_f.append(os.path.abspath(filename))
  return list_f  

#newdir = sys.argv[2]
#print newdir
#list_files(dir)

#def copy_files(newdir):
#   newdir = sys.argv[2]
#  print newdir
#  if os.path.dirname(  



def main():
  # This basic command line argument parsing code is provided.
  # Add code to call your functions below.

  # Make a list of command line arguments, omitting the [0] element
  # which is the script itself.
  args = sys.argv[1:]
  if not args:
    print "usage: [--todir dir][--tozip zipfile] dir [dir ...]";
    sys.exit(1)

  # todir and tozip are either set from command line
  # or left as the empty string.
  # The args array is left just containing the dirs.
  todir = ''
  if args[0] == '--todir':
    todir = args[1]
    del args[0:2]

  tozip = ''
  if args[0] == '--tozip':
    tozip = args[1]
    del args[0:2]

  if len(args) == 0:
    print "error: must specify one or more dirs"
    sys.exit(1)

  # +++your code here+++
  # Call your functions

#  if not todir or not todzip: list_files(dir)
#  if not tozip or not todir: list_files(dir)


  if not todir: print '\n'.join(list_files(dir))
  if todir: 
    if not os.path.exists(todir): os.mkdir(todir)
    for fname in list_files(dir): shutil.copy(fname,todir)


  if tozip:
    cmd = 'zip -j ' + tozip + ' ' + ' '.join(list_files(dir))
    print "Command to run:\n", cmd   ## good to debug cmd before actually running it
    (status, output) = commands.getstatusoutput(cmd)
    if status:    ## Error case, print the command's output to stderr and exit
      sys.stderr.write(output)
      sys.exit(1)
    print output  ## Otherwise do something with the command's output


    
#  copy_files(newdir)


    #copy_files(dir)
  
if __name__ == "__main__":
  main()
